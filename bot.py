from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

import gspread
from oauth2client.service_account import ServiceAccountCredentials

ADMIN_ID = 612855589

def save_to_sheet(user, data):
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
    client = gspread.authorize(creds)

    sheet = client.open_by_url("https://docs.google.com/spreadsheets/d/1JBM4dMlEuDYyU9_2w6iOOFEhrIV8XDPNCg_ph_MTrLc").worksheet("–õ–∏—Å—Ç1")
    all_rows = sheet.get_all_values()
    next_number = len(all_rows) + 1

    row = [
        next_number,
        user.id,
        f"@{user.username}" if user.username else "–Ω–µ–º–∞—î",
        data.get("age", ""),
        data.get("device", ""),
        data.get("stream", ""),
        data.get("motivation", ""),
        data.get("crypto", ""),
        ""
    ]

    sheet.append_row(row)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    keyboard = [["‚úÖ –Ø –≥–æ—Ç–æ–≤–∏–π(-–∞) –ø—Ä–æ–π—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤—ñ—Ç, {user.first_name}! üëã\n\n"
        "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –ø—Ä–æ—î–∫—Ç—É *STREAMERS GUN*!\n\n"
        "–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –≤—ñ–¥–±—ñ—Ä –¥–ª—è —É—á–∞—Å—Ç—ñ.\n\n"
        "–ö–æ–ª–∏ –±—É–¥–µ—à –≥–æ—Ç–æ–≤–∏–π(-–∞) ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.",
        parse_mode="Markdown",
        reply_markup=markup
    )

async def handle_ready(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["18-20"], ["20-25"], ["25-30"], ["30-40"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        "–°–∫–∞–∂–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?\n–í–∏–±–µ—Ä–∏ —Å–≤—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç –Ω–∏–∂—á–µ üëá",
        reply_markup=markup
    )
    context.user_data["step"] = "age"

async def handle_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["age"] = update.message.text
    keyboard = [["‚úÖ –¢–∞–∫, —î –ü–ö –∞–±–æ –Ω–æ—É—Ç–±—É–∫"], ["üì± –¢—ñ–ª—å–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–ß–∏ —î —É —Ç–µ–±–µ –∫–æ–º–ø‚Äô—é—Ç–µ—Ä –∞–±–æ –Ω–æ—É—Ç–±—É–∫?", reply_markup=markup)
    context.user_data["step"] = "device"

async def handle_device(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.message.text
    context.user_data["device"] = answer
    if answer == "üì± –¢—ñ–ª—å–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω":
        await update.message.reply_text("‚ùå –í–∏–±–∞—á, –¥—Ä—É–∂–µ, –∞–ª–µ —Ç–∏ –Ω–∞–º –ø–æ–∫–∏ –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—à‚Ä¶")
        return
    keyboard = [["‚úÖ –¢–∞–∫, –≥–æ—Ç–æ–≤–∏–π(-–∞)!"], ["‚ùå –ù—ñ, –Ω–µ –≥–æ—Ç–æ–≤–∏–π(-–∞)"], ["üôÇ –ë—É–¥—É —Å—Ç–∞—Ä–∞—Ç–∏—Å—å!"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–ß–∏ –≥–æ—Ç–æ–≤–∏–π(-–∞) —Å—Ç—Ä—ñ–º–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 –≥–æ–¥–∏–Ω–∏ –Ω–∞ –¥–µ–Ω—å?", reply_markup=markup)
    context.user_data["step"] = "stream"

async def handle_stream(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.message.text
    context.user_data["stream"] = answer
    if answer in ["‚ùå –ù—ñ, –Ω–µ –≥–æ—Ç–æ–≤–∏–π(-–∞)"]:
        await update.message.reply_text("üôè –î—è–∫—É—î–º–æ –∑–∞ —á–µ—Å–Ω—ñ—Å—Ç—å! –ê–ª–µ –º–∏ —à—É–∫–∞—î–º–æ —Å–∞–º–µ —Ç–∏—Ö, —Ö—Ç–æ –≤–∂–µ –ø–æ–≤–Ω—ñ—Å—Ç—é –≥–æ—Ç–æ–≤–∏–π. –ë–∞–∂–∞—î–º–æ —Ç–æ–±—ñ —É—Å–ø—ñ—Ö—ñ–≤!")
        return
    keyboard = [["üí∏ –ì—Ä–æ—à—ñ"], ["üöÄ –ü–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å"], ["üéØ –Ü–Ω—Ç–µ—Ä–µ—Å"], ["üí° –°–∞–º–æ—Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–ß–æ–º—É —Ç–∏ —Ö–æ—á–µ—à —Å—Ç—Ä—ñ–º–∏—Ç–∏ –∫–∞–∑–∏–Ω–æ –≤ TikTok?", reply_markup=markup)
    context.user_data["step"] = "why"

async def handle_why(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["motivation"] = update.message.text
    keyboard = [
        ["‚úÖ –¢–∞–∫, –º–∞—é –¥–æ—Å–≤—ñ–¥"],
        ["üëõ –ö–æ—Ä–∏—Å—Ç—É–≤–∞–≤—Å—è(-–ª–∞—Å—å) –±—ñ—Ä–∂–µ—é —Ä–∞–∑ –∞–±–æ –¥–≤–∞"],
        ["ü§∑ –ß—É–≤(-–ª–∞), –∞–ª–µ –Ω–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–≤—Å—è(-–ª–∞—Å—å)"],
        ["‚ùì –©–æ —Ç–∞–∫–µ USDT?"]
    ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–ú–∞—î—à –¥–æ—Å–≤—ñ–¥ —ñ–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é?\n–ú–∏ –≤–∏–ø–ª–∞—á—É—î–º–æ –∑–∞—Ä–ø–ª–∞—Ç—É –≤ *USDT üíµ*", parse_mode="Markdown", reply_markup=markup)
    context.user_data["step"] = "crypto"

async def handle_crypto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.message.text
    context.user_data["crypto"] = answer
    user = update.effective_user

    if answer == "‚úÖ –¢–∞–∫, –º–∞—é –¥–æ—Å–≤—ñ–¥":
        await update.message.reply_text("üéâ –ì–æ—Ç–æ–≤–æ! –î—è–∫—É—é, —â–æ –ø—Ä–æ–π—à–æ–≤(-–ª–∞) –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è! –ó —Ç–æ–±–æ—é –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–º–∞–Ω–¥–∏ üì©")
    else:
        keyboard = [["–ó—Ä–æ–∑—É–º—ñ–≤ üß†"]]
        markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(
            "üí∏ *–ó–∞—Ä–ø–ª–∞—Ç–∞ —É USDT ‚Äî —Ü–µ –ø—Ä–æ—Å—Ç–æ:*\n\n"
            "USDT ‚Äî —Ü–µ —Å—Ç–∞–±—ñ–ª—å–Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞, —è–∫–∞ –∑–∞–≤–∂–¥–∏ –¥–æ—Ä—ñ–≤–Ω—é—î 1 –¥–æ–ª–∞—Ä—É –°–®–ê.\n–¢–æ–±—Ç–æ 100 USDT ‚âà 100$.\n\n"
            "üîê –¢–∏ –æ—Ç—Ä–∏–º—É—î—à –∑–∞—Ä–ø–ª–∞—Ç—É –≤ USDT –Ω–∞ –±—ñ—Ä–∂—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: Binance, WhiteBit, Bybit).\n\n"
            "üí≥ –ü–æ—Ç—ñ–º –æ–¥–Ω–∏–º –∫–ª—ñ–∫–æ–º –º–æ–∂–µ—à:\n ‚Ä¢ üîÅ –û–±–º—ñ–Ω—è—Ç–∏ –Ω–∞ –≥—Ä–∏–≤–Ω—ñ/—î–≤—Ä–æ\n ‚Ä¢ üí∏ –í–∏–≤–µ—Å—Ç–∏ –ø—Ä—è–º–æ –Ω–∞ —Å–≤–æ—é –±–∞–Ω–∫—ñ–≤—Å—å–∫—É –∫–∞—Ä—Ç–∫—É\n ‚Ä¢ üíº –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ —è–∫ ¬´–µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏–π –¥–æ–ª–∞—Ä¬ª\n\n"
            "üß† –¶–µ —à–≤–∏–¥–∫–æ, –∑—Ä—É—á–Ω–æ —ñ –ª–µ–≥–∞–ª—å–Ω–æ. –ú–∏ –¥–æ–ø–æ–º–æ–∂–µ–º–æ, —è–∫—â–æ —Ç–∏ –Ω–æ–≤–∞—á–æ–∫.",
            parse_mode="Markdown",
            reply_markup=markup
        )
        context.user_data["step"] = "done"
        return

    message = f"üìù –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:\nUsername: @{user.username if user.username else '–Ω–µ–º–∞—î'}\nID: {user.id}"
    await context.bot.send_message(chat_id=ADMIN_ID, text=message)
    save_to_sheet(user, context.user_data)

async def handle_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text("üéâ –î—è–∫—É—é, —â–æ –ø—Ä–æ–π—à–æ–≤(-–ª–∞) –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è! –ó —Ç–æ–±–æ—é –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–º–∞–Ω–¥–∏ üì©")
    message = f"üìù –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:\nUsername: @{user.username if user.username else '–Ω–µ–º–∞—î'}\nID: {user.id}"
    await context.bot.send_message(chat_id=ADMIN_ID, text=message)
    save_to_sheet(user, context.user_data)


def main():
    app = Application.builder().token("7262689907:AAGej4aFkZo8plN16IGeS_5JDx8YuGyaGK4").build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^‚úÖ –Ø –≥–æ—Ç–æ–≤–∏–π\(-–∞\) –ø—Ä–æ–π—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è$"), handle_ready))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^(18-20|20-25|25-30|30-40)$"), handle_age))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^(‚úÖ –¢–∞–∫, —î –ü–ö –∞–±–æ –Ω–æ—É—Ç–±—É–∫|üì± –¢—ñ–ª—å–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω)$"), handle_device))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^(‚úÖ –¢–∞–∫, –≥–æ—Ç–æ–≤–∏–π\(-–∞\)!|‚ùå –ù—ñ, –Ω–µ –≥–æ—Ç–æ–≤–∏–π\(-–∞\)|üôÇ –ë—É–¥—É —Å—Ç–∞—Ä–∞—Ç–∏—Å—å!)$"), handle_stream))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^(üí∏ –ì—Ä–æ—à—ñ|üöÄ –ü–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å|üéØ –Ü–Ω—Ç–µ—Ä–µ—Å|üí° –°–∞–º–æ—Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è)$"), handle_why))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^(‚úÖ –¢–∞–∫, –º–∞—é –¥–æ—Å–≤—ñ–¥|üëõ –ö–æ—Ä–∏—Å—Ç—É–≤–∞–≤—Å—è\(-–ª–∞—Å—å\) –±—ñ—Ä–∂–µ—é —Ä–∞–∑ –∞–±–æ –¥–≤–∞|ü§∑ –ß—É–≤\(-–ª–∞\), –∞–ª–µ –Ω–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–≤—Å—è\(-–ª–∞—Å—å\)|‚ùì –©–æ —Ç–∞–∫–µ USDT\?)$"), handle_crypto))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^–ó—Ä–æ–∑—É–º—ñ–≤ üß†$"), handle_done))
    app.run_polling()

if __name__ == "__main__":
    main()
